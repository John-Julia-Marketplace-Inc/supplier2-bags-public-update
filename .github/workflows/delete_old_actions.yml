name: Delete Old Workflow Runs

on:
  schedule:
    - cron: '0 */1 * * *'  # Runs every hour
  workflow_dispatch: # Allows you to run it manually

jobs:
  delete-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install requests

      - name: Delete Workflow Runs Older than 12 Hours
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_PAT }}
        run: |
          import os
          import requests
          from datetime import datetime, timezone, timedelta

          # Variables
          repo_name = 'supplier2-bags-public-update'
          token = os.getenv("GITHUB_TOKEN")
          headers = {"Authorization": f"Bearer {token}"}
          delete_before = datetime.now(timezone.utc) - timedelta(hours=12)

          # Get all workflow runs
          workflow_runs_url = f"https://api.github.com/repos/{repo_name}/actions/runs"
          response = requests.get(workflow_runs_url, headers=headers)
          response.raise_for_status()

          # Parse response
          workflow_runs = response.json()["workflow_runs"]

          for run in workflow_runs:
              run_id = run["id"]
              run_created_at = datetime.strptime(run["created_at"], "%Y-%m-%dT%H:%M:%SZ").replace(tzinfo=timezone.utc)

              if run_created_at < delete_before:
                  delete_url = f"https://api.github.com/repos/{repo_name}/actions/runs/{run_id}"
                  delete_response = requests.delete(delete_url, headers=headers)

                  if delete_response.status_code == 204:
                      print(f"Deleted run {run_id} created at {run['created_at']}")
                  else:
                      print(f"Failed to delete run {run_id} (status code: {delete_response.status_code})")
